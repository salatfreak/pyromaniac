"""Wrap value in magic type for convenient member access and default handling.

* Dot notation: `magic({"foo": [{"bar": "baz"}]}).foo[0].bar`
* Default handling: `magic({"foo": "bar"}).baz.qux or "default"`

Recursively wraps dicts and lists to allow access to dict members via dot
notation.

When encountering non-existent array or dict keys a *Nothing* object will be
returned that in turn returns itself when indexed. The *Nothing* object is
falsy and therefore allows specifying default values using `or DEFAULT`.

Beware that everything other than dicts, lists, and non-existent keys are
returned as is: `magic({"foo": 42}).foo.bar` will still result in an
AttributeError because 42 has no attribute *bar*.

:param value: any value to wrap
:returns: wrapped value for dicts and lists or the original value
"""

(value: Any)

---

class Dict(dict):
    def __getitem__(self, key: Any) -> Any:
        try:
            return wrap(super().__getitem__(key))
        except KeyError:
            return Nothing()

    def __getattr__(self, name: str) -> Any:
        return self.__getitem__(name)


class List(list):
    def __getitem__(self, key: Any) -> Any:
        try:
            return wrap(super().__getitem__(key))
        except (TypeError, IndexError):
            return Nothing()

    def __getattr__(self, name: str) -> 'Nothing':
        return Nothing()


class Nothing:
    def __getitem__(self, key: Any) -> 'Nothing':
        return self

    def __getattr__(self, name: str) -> 'Nothing':
        return self

    def __bool__(self) -> bool:
        return False


def wrap(value: Any) -> Any:
    match value:
        case dict(d): return Dict(d)
        case list(l): return List(l)
        case v: return v


wrap(value)
