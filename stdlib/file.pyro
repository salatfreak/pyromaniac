"""Create file fields with specified content and file ownership.

The result is intended to be added as an element to the `storage.files` list.

The *path* must be absolute unless the user name is specified, in which case
relative paths will be interpreted relative to the user's default home
directory.

The *content* and *headers* arguments are passed through the *std.contents*
component. The *user* and *group* arguments are passed through the
*std.ownership* component. See their documentation for further details.

**Examples**:
- Add inline file for root user: `std.file("/file.txt", "foo")`
- Add file from disk for "core" user in its home directory:
  `std.file("file.txt", _/"file.txt", "core")`
"""

(
    path: Path,                               # path to create the file at in the final system
    content: str | Path | URL | dict = None,  # string, path, or URL source or a custom dict
    user: int | str = None,                   # user ID or name
    group: int | str | None = ...,            # group ID or name (defaults to the same as user)
    headers: dict = {},                       # map of request headers for URL contents
    **fields: Any,                            # additional fields to take over as they are
)

---

# interpret relative to home
if not path.is_absolute() and isinstance(user, str):
    path = Path(f"/home/{user}", path)

# add contents
if content is not None:
    fields['contents'] = _.contents(content, headers)

# construct result
{'path': path, **_.ownership(user, group), **fields}
